/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ListadoDePedidosParaReparto.java
 *
 * Created on 01-feb-2012, 16:56:46
 */
package siderconcapadatos;

import actualizaciones.ActOt;
import actualizaciones.Checking;
import actualizaciones.ChequearCantidadesPedidos;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import objetos.PedidosParaReparto;
import objetos.Vehiculos;
import proceso.Coneccion;
import proceso.Procesos;
import seguimientos.Archivador;
import seguimientos.GuardarMovimientos;
import siderconcapadatos.tablas.MiModeloTabla;
import siderconcapadatos.tablas.MiTablaVehiculos;
import siderconcapadatos.tablas.miTablaModificacion;

/**
 *
 * @author Administrador
 */
public class ListadoDePedidosParaReparto extends javax.swing.JInternalFrame {
    static ArrayList pedidosSeleccionados=new ArrayList();
    //static ArrayList listaPedidos=new ArrayList();
    static ArrayList vehiculos=new ArrayList();
    static ArrayList nexo=vehiculos;
    static String numeroDePedido=null;
    static String fechaPedido=SiderconCapaatos.fecha;
    static Double pesoTotal=0.00;
    private int numeroUnidad;
    private int zonaSeleccionada;
    static int contad=0;
    static String movimientos="";
    static int listasEliminadas=0;
    static Connection cone=null;
    private Coneccion con=null;
    //static String fecha;
    /** Creates new form ListadoDePedidosParaReparto */
    public ListadoDePedidosParaReparto() {
        con=new Coneccion();
        cone=con.getCn();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        mod = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        miTablaModificacion modelo=new miTablaModificacion();
        PedidosParaReparto pedid=new PedidosParaReparto();
        Procesos pro=new Procesos();
        ArrayList listado=new ArrayList();
        String nPedido=numeroDePedido;
        String fcPedido=fechaPedido;
        System.out.println(" ped "+nPedido+" fecha "+fcPedido);
        try{
            listado=pro.detallePedidoParaCorreccion(nPedido,fcPedido);
        }catch(Exception ex){
            System.out.println("no se cargo el detalle "+ex);
        }
        Iterator ii=listado.listIterator();
        jTable3 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        MiTablaVehiculos tab=new MiTablaVehiculos();
        //ArrayList vehiculos=new ArrayList();
        Integer renglon=0;
        Vehiculos unidad=new Vehiculos();
        Procesos pr=new Procesos();
        try{
            vehiculos=pr.ListarVehiculos();
            vehiculos=pr.cargarHdrVehiculo(vehiculos, fechaPedido);
        }catch(Exception ex){
            System.out.println("no se pudo listar los vehiculos "+ex);
        }
        Iterator ix=vehiculos.listIterator();
        jTable2 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        MiModeloTabla miModelo=new MiModeloTabla();
        DecimalFormat formato=new DecimalFormat("####.#");
        pesoTotal=0.0;
        Double asignado=0.00;
        Double pesoParcial=0.0;
        String peso=null;
        //ArrayListlistaPedidos=new ArrayList();
        PedidosParaReparto ped=new PedidosParaReparto();
        Procesos proced=new Procesos();
        Iterator it=SiderconCapaatos.listaPedidos.listIterator();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        mod.setTitle("Modificacion de Datos del Pedido");
        mod.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                modComponentResized(evt);
            }
            public void componentShown(java.awt.event.ComponentEvent evt) {
                modComponentShown(evt);
            }
        });

        jTable3.setModel(modelo);
        modelo.addColumn("Nro Pedido");
        modelo.addColumn("Cod Articulo");
        modelo.addColumn("descrip Articulo");
        modelo.addColumn("cant pedida");
        modelo.addColumn("cant a entregar");
        modelo.addColumn("fecha de entrega");
        Object[] fila4=new Object[6];
        while(ii.hasNext()){
            pedid=(PedidosParaReparto)ii.next();
            fila4[0]=pedid.getCodigoTangoDePedido();
            fila4[1]=pedid.getCodigoArticulo();
            fila4[2]=pedid.getDescripcionArticulo();
            fila4[3]=pedid.getCantidadArticulo();
            fila4[4]=pedid.getCantidadArticuloPendiente();
            fila4[5]=pedid.getFechaEnvio();
        }
        modelo.addRow(fila4);
        jTable3.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jTable3ComponentShown(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout modLayout = new javax.swing.GroupLayout(mod.getContentPane());
        mod.getContentPane().setLayout(modLayout);
        modLayout.setHorizontalGroup(
            modLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 692, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        modLayout.setVerticalGroup(
            modLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(68, Short.MAX_VALUE))
        );

        setClosable(true);
        setMaximizable(true);
        setTitle("Listados de Pedidos para Reparto");
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jTable2.setModel(tab);
        tab.addColumn("Seleccion");
        tab.addColumn("Vehiculo");
        tab.addColumn("Cap. de Carga Actual");
        tab.addColumn("HDR");
        tab.addColumn("NÂº Listado");
        Object []fila2=new Object[5];
        while(ix.hasNext()){
            unidad=(Vehiculos) ix.next();
            numeroUnidad=unidad.getNumero();
            fila2[0]=false;
            fila2[1]=numeroUnidad+" "+unidad.getDescripcion();
            Double pesoNexo=0.00;
            //System.out.println(renglon);
            //pesoNexo=(Double) nexo.get(renglon);
            if(pesoNexo==0.00){
                fila2[2]=unidad.getCapacidadDeCarga();
            }else{
                //Double pesoNexo=(Double)nexo.get(renglon);
                fila2[2]=unidad.getCapacidadDeCarga()-pesoNexo;
            }
            fila2[3]=unidad.getNumeroHdr();

            //renglon++;
            tab.addRow(fila2);
        }
        jTable2.setToolTipText("listado de vehiculos disponibles para HDR");
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton1.setText("Guardar Seleccion");
        jButton1.setToolTipText("Almacena los pedidos seÃ±alado para el vehiculo marcado");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(miModelo);
        miModelo.addColumn("Nro de Pedido");
        miModelo.addColumn("Razon Social");
        miModelo.addColumn("Peso Pedido");
        miModelo.addColumn("Vehiculo");
        miModelo.addColumn("Seleccion");
        miModelo.addColumn("Nueva Asignac de Vehiculo");
        miModelo.addColumn("Zona");
        miModelo.addColumn("Alerta");
        Object []fila=new Object[8];
        Integer renglones=null;
        int vehi=0;
        while(it.hasNext()){
            ped=(PedidosParaReparto) it.next();
            fila[0]=ped.getCodigoTangoDePedido().substring(7);
            fila[1]=ped.getRazonSocial();
            //peso=formato.format(ped.getPesoTotal());
            //pesoParcial=Double.valueOf(peso).doubleValue();
            //fila[2]=pesoParcial;
            fila[2]=ped.getPesoTotal();
            pesoTotal+=ped.getPesoTotal();
            fila[3]=ped.getVehiculoAsignado();
            vehi=ped.getVehiculoAsignado() -1;
            if(vehi < 0){
                vehi=0;
            }
            jTable2.setValueAt(true,vehi,0);
            if(vehi==0){
                fila[4]=false;
            }else{
                //aca modifique
                fila[4]=false;
                int hilo=ped.getVehiculoAsignado();
                hilo=hilo-1;
                System.out.println(hilo);
                jTable2.setValueAt(true,hilo ,0);
                Double pesoVehiculo=(Double)jTable2.getValueAt(hilo,2);
                pesoVehiculo=pesoVehiculo - ped.getPesoTotal();
                jTable2.setValueAt(pesoVehiculo,hilo,2);
                asignado+=ped.getPesoTotal();
                //Double peso=(Double)nexo.get(ped.getVehiculoAsignado());
                //peso=peso + ped.getPesoTotal();
                //nexo.set(ped.getVehiculoAsignado(),peso);
            }

            fila[6]=ped.getZonaDescripcion();
            if(ped.getAlertaAsignada()> 0){
                fila[7]=ped.getAlertaDescripcion();
            }else{
                fila[7]="";
            }
            miModelo.addRow(fila);
        }
        peso=formato.format(pesoTotal);
        //peso=String.valueOf(pesoParcial);
        jTextField1.setText(peso);
        String asig=formato.format(asignado);
        jTextField2.setText(asig);
        Double resultado=0.00;
        resultado=pesoTotal - asignado;
        String res=formato.format(resultado);

        jTextField3.setText(res);
        jTable1.setToolTipText("Listado de pedidos correspondientes a la fecha seleccionada");
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton2.setText("Ver Carga");
        jButton2.setToolTipText("Muestra la carga asignada al vehiculo seÃ±alado");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton3.setText("Modificar Pedido");
        jButton3.setToolTipText("Permite modificar el pedido seÃ±alado");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton4.setText("Consultar Saldo ");
        jButton4.setToolTipText("Muestra el Saldo actual (segÃºn base Tango) del cliente marcado");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        dateChooserCombo1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateChooserCombo1OnSelectionChange(evt);
            }
        });

        jLabel1.setText("Fecha de Entrega :");

        jTextField1.setToolTipText("cantidad total de Kg. resultante del total de los pedidos para esta fecha");

        jLabel2.setText("Total Kg :");

        jLabel3.setText("Total Kg Asignados :");

        jLabel4.setText("Total Kg Pendientes de Asignar:");

        jTextField2.setToolTipText("Total Kg. asignados a los vehiculos");

        jTextField3.setToolTipText("Total Kg. pendientes de asignaciÃ³n");

        jComboBox1.addItem("TODOS");
        try{

            String sql="select zonas.descripcion from zonas order by numero";
            Statement st=cone.createStatement();
            st.execute(sql);
            ResultSet rs=st.getResultSet();
            while(rs.next()){
                jComboBox1.addItem(rs.getString("descripcion"));
            }

        }catch(Exception ex){
            System.err.println("error "+ex);
        }
        jComboBox1.setToolTipText("Listado de Zonas establecidas en los recorridos");

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton5.setText("Filtrar P/Zona");
        jButton5.setToolTipText("muestra el listado de pedidos correspondientes a la zona seleccionada");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Verificador");
        jButton6.setEnabled(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton7.setText("Anular LPMÂ´S");
        jButton7.setToolTipText("Lista y permite la anulaciÃ³n de los LPM emitidos en la fecha");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/logo.png")));
        jButton8.setText("Eliminar Pedido");
        jButton8.setToolTipText("Permite modificar el pedido seÃ±alado");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(dateChooserCombo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(53, 53, 53)
                                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(53, 53, 53)
                                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(53, 53, 53)
                                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(134, 134, 134)))
                                .addGap(0, 29, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 364, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(29, 29, 29))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(dateChooserCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)))
                            .addComponent(jLabel2))
                        .addGap(6, 6, 6))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3)
                    .addComponent(jButton2)
                    .addComponent(jButton1)
                    .addComponent(jButton6))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addContainerGap(192, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
            int fila=jTable1.rowAtPoint(evt.getPoint());
            System.out.println("fila seleccionada es : "+fila);
            Boolean tipo=(Boolean) jTable1.getValueAt(fila, 4);
           System.out.println("tipo de dato "+tipo);
           if(tipo){
            pedidosSeleccionados.add(fila);
            Iterator ss=pedidosSeleccionados.listIterator();
            
            
            String fechaMod=fechaPedido.replaceAll("/","_");
            
          
                //reg=new FileOutputStream("c://bases//STHDR//regMv.txt");
              
            //int contad=0;
            String numeroPedido=(String)jTable1.getValueAt(fila,0);
            String nombre=(String)jTable1.getValueAt(fila,1);
            movimientos+=fechaPedido+" LA MATRIZ TIENE CARGADO "+numeroPedido+" RAZON SOCIAL "+nombre+" orden "+contad+"\r\n";
                   
                       //salida.write(movimientos);
                       GuardarMovimientos gArch=new Archivador();
                       gArch.registrarMovimiento(movimientos, "regMv.txt", fechaMod);
                   
                   contad++;

            while(ss.hasNext()){
                Integer fi=(Integer) ss.next();
                System.out.println("la matriz tiene cargado:"+fi);
            }
            
            PedidosParaReparto pr;
            pr=(PedidosParaReparto) SiderconCapaatos.listaPedidos.get(fila);
            Double peso=pr.getPesoTotal();
           
            
           }else{
               int unid=(Integer)jTable1.getValueAt(fila,3);
               if(fila > 0){
pedidosSeleccionados.add(fila);
            Iterator ss=pedidosSeleccionados.listIterator();
            
            
            String fechaMod=fechaPedido.replaceAll("/","_");
            
          
                //reg=new FileOutputStream("c://bases//STHDR//regMv.txt");
              
            //int contad=0;
            String numeroPedido=(String)jTable1.getValueAt(fila,0);
            String nombre=(String)jTable1.getValueAt(fila,1);
            movimientos+=fechaPedido+" LA MATRIZ TIENE CARGADO "+numeroPedido+" RAZON SOCIAL "+nombre+" orden "+contad+"\r\n";
                   
                       //salida.write(movimientos);
                       GuardarMovimientos gArch=new Archivador();
                       gArch.registrarMovimiento(movimientos, "regMv.txt", fechaMod);
                   
                   contad++;

            while(ss.hasNext()){
                Integer fi=(Integer) ss.next();
                System.out.println("la matriz tiene cargado:"+fi);
            }
            
            PedidosParaReparto pr;
            pr=(PedidosParaReparto) SiderconCapaatos.listaPedidos.get(fila);
            Double peso=pr.getPesoTotal();
           
                   
               }
               jTable1.setValueAt(true, fila,4);
           }
            

    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //this.jButton2.setEnabled(false);    
            jTable1.tableChanged(null);
            DecimalFormat formato=new DecimalFormat("####.#");
            Integer filas=0;
            int numeroVehiculo=0;
            PedidosParaReparto pedi=new PedidosParaReparto();
            Procesos proceder=new Procesos();
            Vehiculos unid=new Vehiculos();
            
            
            filas=vehiculos.size();
            for(int i=0;i<filas;i++){
                
                
                
                unid=(Vehiculos)vehiculos.get(i);
                int pos=i;
                jTable2.setValueAt(unid.getCapacidadDeCarga(), pos,2);
                System.err.println(" VEHICULO SELECCIONADO "+numeroVehiculo+" POSICION"+pos);
                unid.setCapacidadDeCarga(0.00);
                
            }
            
            
            Iterator zz=SiderconCapaatos.listaPedidos.listIterator();
            while(zz.hasNext()){
                pedi=(PedidosParaReparto) zz.next();
                //System.out.println("razon social:"+pedi.getRazonSocial()+"vehiculo asignado:"+pedi.getVehiculoAsignado());
                if(pedi.getVehiculoAsignado()==0){
                    
                }else{
                    String fechaC=pedi.getFechaEnvio();
                    if(pedi.getFechaEnvio().length()==10){
                        
                    }else{
                        fechaC=pedi.getFechaEnvio().substring(0,10);
                        //System.out.println("NUEVA FECHA"+fechaC);
                        pedi.setFechaEnvio(fechaC);
                    }
                    Double peso=pedi.getPesoTotal();
                    Double total=0.00;
                    pesoTotal=pesoTotal - peso;
                    jTextField1.setText(formato.format(pesoTotal));
                    int posic=pedi.getVehiculoAsignado();
                    Double pesoActual=(Double) jTable2.getValueAt(posic, 2);
                    unid=(Vehiculos)vehiculos.get(pedi.getVehiculoAsignado());
                    Double pTporUnidad=Math.ceil(unid.getCapacidadDeCarga() + peso);
                    
                    unid.setCapacidadDeCarga(pTporUnidad);
                    //Double pesoNexo=(Double) nexo.get(pedi.getVehiculoAsignado());
                    //pesoActual=pesoActual - pesoNexo;
                    total=pesoActual + peso;
                    int un=pedi.getVehiculoAsignado()- 1;
                    jTable2.setValueAt(pTporUnidad,un,2);
                    System.err.println("valor actual"+total+" renglon"+un+" peso carga "+pTporUnidad+" peso pedido"+peso);
                    //unid.setCapacidadDeCarga(total);
                    Double pesoT=0.00;
                    Double pesoA=0.00;
                    Double pesoR=0.00;
                    //pesoT=Double.parseDouble(jTextField1.getText());
                    //pesoA=Double.parseDouble(jTextField2.getText());
                    String pR=jTextField3.getText();
                    //System.err.println("PESO "+pR);
                    //pesoR=Double.parseDouble(pR);
                    pesoA=pesoA-peso;
                    pesoR=pesoT - pesoA;
                    String pesoAs=formato.format(pesoA);
                    String pesoRe=formato.format(pesoR);
                    jTextField2.setText(pesoAs);
                    jTextField3.setText(pesoRe);
                    
                }
            }
        try {
            try {
                proceder.guardarAsignacionDeVehiculos(SiderconCapaatos.listaPedidos);
            } catch (IOException ex) {
                GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
           GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
        }
        int cantidad=jTable1.getRowCount();
        int unida=0;
        String vUni="";
        for(int aa=0;aa < cantidad;aa++){
            try{
            vUni=(String)jTable1.getValueAt(aa,5);
            }catch(Exception ex){
            unida=(Integer)jTable1.getValueAt(aa,5);    
            }
            if(unida==0){
               unida=0;
           }else{
               //vUni=(String)jTable1.getValueAt(aa,5);
           //unida=Integer.parseInt(vUni);
           }
           if(unida==0){
               
           }else{
               jTable1.setValueAt(unida, aa, 3);
               jTable1.setValueAt("", aa, 5);
               jTable1.setValueAt(false, aa,4);
               unida=0;
           }
           
        }
            this.jButton2.setEnabled(true);
            this.repaint();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseClicked
            int uniSeleccionada=jTable2.rowAtPoint(evt.getPoint());
            Vehiculos unidad=(Vehiculos) vehiculos.get(uniSeleccionada);
            
            String descripcionUni=unidad.getDescripcion();//(String) jTable2.getValueAt(uniSeleccionada,1);
            Boolean sel=(Boolean) jTable2.getValueAt(uniSeleccionada,0);
            //Boolean sec=(Boolean) jTable2.getValueAt(uniSeleccionada,3);
            uniSeleccionada=unidad.getNumero();
            if(sel){
            PedidosParaReparto ped=new PedidosParaReparto();
            Iterator xx=pedidosSeleccionados.listIterator();
            while(xx.hasNext()){
                Integer posicionPedidos=(Integer) xx.next();
                ped=(PedidosParaReparto) SiderconCapaatos.listaPedidos.get(posicionPedidos);
                if(ped.getVehiculoAnterior()==uniSeleccionada){
                    ped.setVehiculoAsignado(uniSeleccionada);
                    jTable1.setValueAt(uniSeleccionada, posicionPedidos,5);
                }else{
                    int vAnt=ped.getVehiculoAsignado();
                    ped.setVehiculoAnterior(vAnt);
                    ped.setVehiculoAsignado(uniSeleccionada);
                    jTable1.setValueAt(uniSeleccionada, posicionPedidos,5);
                }
                
            }
            
            pedidosSeleccionados.clear();
            }

            //uniSeleccionada=0;
    }//GEN-LAST:event_jTable2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int unidad=jTable2.getSelectedRow();
        unidad=unidad + 1;
        String descripcionVehiculo=(String) jTable2.getValueAt(unidad,1);
        int largo=descripcionVehiculo.length();
        descripcionVehiculo=descripcionVehiculo.substring(1, largo);
        ArrayList seleccionados=new ArrayList();
        PedidosParaReparto pd=new PedidosParaReparto();
        Procesos pro=new Procesos();
        
            seleccionados=pro.ListarPedidosPorVehiculo(unidad);
        
        Iterator yy=seleccionados.listIterator();
        ChequearCantidadesPedidos ch=new Checking();
        while(yy.hasNext()){
            pd=(PedidosParaReparto)yy.next();
            System.out.println("RAZON SOCIAL "+pd.getRazonSocial()+" UNIDAD "+unidad);
            pd=(PedidosParaReparto)ch.check(pd);
        }
        ListadoDeCargaPorVehiculo lst=new ListadoDeCargaPorVehiculo(unidad,fechaPedido,descripcionVehiculo);
        InicioSiderconHdr.jDesktopPane1.add(lst);
        lst.toFront();
        lst.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            
        int pedidoModificable=jTable1.getSelectedRow();
            String numePedido=(String) jTable1.getValueAt(pedidoModificable,0);
            Procesos pro=new Procesos();
       
            //super.setVisible(false);
            numeroDePedido=numePedido;
            System.out.println("MODIFICACION DE PEDIDO NÂº "+numeroDePedido);
            //fechaPedido=SiderconCapaatos.fecha;
            
            ModificacionDePedidos mod1=new ModificacionDePedidos(0);
            //mod1.setNmPedido(numePedido);
            //ModPedidos mod=null;
            //JFrame.addComponent(mod);
            //mod.pack();
           // super.add(mod);
            InicioSiderconHdr.jDesktopPane1.add(mod1);
            //mod1.setVisible(true);
            //mod.setLocation(this);
            mod1.toFront();
            mod1.setVisible(true);
            jTable1.setValueAt(false,pedidoModificable,4);
            pedidosSeleccionados.clear();
            //mod1.pack();
            //this.setVisible(false);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        int pedidoSaldo=jTable1.getSelectedRow();
        PedidosParaReparto ped=new PedidosParaReparto();
        DecimalFormat df=new DecimalFormat("####.##");
        ped=(PedidosParaReparto) SiderconCapaatos.listaPedidos.get(pedidoSaldo);
        Double saldo=(Double) ped.getSaldoCliente();
        String resultado;
        if(saldo==null){
            resultado="PS";
        }else{
            //resultado=String.valueOf(saldo);
            resultado=df.format(saldo);
        }
        System.out.println("saldo cliente "+resultado+" cliente "+ped.getCodigoCliente());
        //JOptionPane.showConfirmDialog(null,resultado+" cliente :"+ped.getCodigoCliente(),"SALDO CLIENTE",JOptionPane.INFORMATION_MESSAGE);
        //JOptionPane.showMessageDialog(null,"SALDO DEL CLIENTE : $"+resultado+" cliente numero :"+ped.getCodigoCliente()+" FECHA ACTUALIZACION "+ped.getFechaActualizacionSaldoCliente(),"SALDO DEL CLIENTE ",JOptionPane.PLAIN_MESSAGE);
        JOptionPane.showMessageDialog(null,"SALDO DEL CLIENTE : $"+resultado,"SALDO DEL CLIENTE ",JOptionPane.PLAIN_MESSAGE);
        jTable1.setValueAt(false,pedidoSaldo,4);
        pedidosSeleccionados.clear();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void modComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_modComponentResized

    }//GEN-LAST:event_modComponentResized

    private void modComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_modComponentShown
    
    }//GEN-LAST:event_modComponentShown

    private void jTable3ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jTable3ComponentShown
        String fecha=ListadoDePedidosParaReparto.fechaPedido;
        String nPedido=ListadoDePedidosParaReparto.numeroDePedido;
        System.out.println(" fecha "+fecha+" num pedido "+nPedido);
        miTablaModificacion modelo=new miTablaModificacion();
PedidosParaReparto pedid=new PedidosParaReparto();
Procesos pro=new Procesos();
ArrayList listado=new ArrayList();
//String nPedido=numeroDePedido;
//String fcPedido=fechaPedido;
System.out.println(" ped "+nPedido+" fecha "+fecha);
try{
listado=pro.detallePedidoParaCorreccion(nPedido,fecha);
}catch(Exception ex){
    GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
System.out.println("no se cargo el detalle "+ex);
}
Iterator iy=listado.listIterator();
jTable3 = new javax.swing.JTable();

jTable3.setModel(modelo);
modelo.addColumn("Nro Pedido");
modelo.addColumn("Cod Articulo");
modelo.addColumn("descrip Articulo");
modelo.addColumn("cant pedida");
modelo.addColumn("cant a entregar");
modelo.addColumn("fecha de entrega");
Object[] fila6=new Object[6];
while(iy.hasNext()){
pedid=(PedidosParaReparto)iy.next();
fila6[0]=pedid.getCodigoTangoDePedido();
fila6[1]=pedid.getCodigoArticulo();
fila6[2]=pedid.getDescripcionArticulo();
fila6[3]=pedid.getCantidadArticulo();
fila6[4]=pedid.getCantidadArticuloPendiente();
fila6[5]=pedid.getFechaEnvio();
}
modelo.addRow(fila6);

  
    }//GEN-LAST:event_jTable3ComponentShown

    private void dateChooserCombo1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserCombo1OnSelectionChange
        try {
            zonaSeleccionada=0;
            jComboBox1.setSelectedIndex(0);
            leerChooser();
        } catch (SQLException ex) {
            GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_dateChooserCombo1OnSelectionChange

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        zonaSeleccionada=jComboBox1.getSelectedIndex();
        try {
            leerChooser();
        } catch (SQLException ex) {
            GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            checkButtonV();
        } catch (SQLException ex) {
           GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MousePressed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        abmLpm lpm=new abmLpm(fechaPedido);
        InicioSiderconHdr.jDesktopPane1.add(lpm);
        lpm.setVisible(true);
        lpm.toFront();
         Timer timer=new Timer(1500,new ActionListener(){ 
            @Override
    public void actionPerformed(ActionEvent e) 
    { 
        if(listasEliminadas==1){
            try {
                leerChooser();
            } catch (SQLException ex) {
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
            }
            listasEliminadas=0;
        }
        
     } 
}); 
        timer.start();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
    
    }//GEN-LAST:event_formFocusGained

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
        try {
            con.CerrarCn(cone);
        } catch (SQLException ex) {
            Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formInternalFrameClosed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        int pedidoModificable=jTable1.getSelectedRow();
        String numePedido=(String) jTable1.getValueAt(pedidoModificable,0);
        EliminacionDePedidos elimina=new EliminacionDePedidos(numePedido);
        InicioSiderconHdr.jDesktopPane1.add(elimina);
        elimina.setVisible(true);
        elimina.toFront();
    }//GEN-LAST:event_jButton8ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JDialog mod;
    // End of variables declaration//GEN-END:variables

    public void leerChooser() throws SQLException {
        pedidosSeleccionados.clear();
        vehiculos.clear();
        limpiarTablas();
        
        DecimalFormat fr=new DecimalFormat("00");
        DecimalFormat formato=new DecimalFormat("####.##");
        SiderconCapaatos.listaPedidos.clear();
        SimpleDateFormat dia=new SimpleDateFormat("dd/mm/yyyy");
        //Date mes=Calendar.getInstance().getTime();
        //dateChooserCombo1.setDateFormat(dia);
        Calendar fechaNueva=dateChooserCombo1.getSelectedDate();
        //mes=dia.format(fechaNueva,null,null);
        Double pesoDia=0.00;
        int ano=fechaNueva.get(Calendar.YEAR);
        int mes=fechaNueva.get(Calendar.MONTH);
        mes++;
        int dd=fechaNueva.get(Calendar.DAY_OF_MONTH);
        
        //String fechaNueva=dateChooserCombo1.getText();
        //String fechaNueva=dateChooserCombo1.getSelectedDate();
        //String seleccion1=fechaNueva.toString();
        String seleccion=fr.format(dd)+"/"+fr.format(mes)+"/"+ano;
        //seleccion=new SimpleDateFormat(seleccion1).format(mes);
        fechaPedido=seleccion;
        //System.out.println("fecha seleccionada :"+seleccion);   
        Procesos pr=new Procesos();
        Vehiculos unidad=new Vehiculos();
        PedidosParaReparto ped=new PedidosParaReparto();
        vehiculos=pr.ListarVehiculos();
        try {
            if(zonaSeleccionada==0){
                try {
                    SiderconCapaatos.listaPedidos=pr.ListarPedidosPorFecha(seleccion);
                } catch (ClassNotFoundException ex) {
                    GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                SiderconCapaatos.listaPedidos=pr.listarPedidosPorZona(seleccion, zonaSeleccionada);
            }
            //ActualizarDatosPedidos act=new ActualizarDatosPedidos();
            //act.setFecha(fechaPedido);
            //act.setPedidos(vehiculos);
            //act.start();
        } catch (SQLException ex) {
           GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
        }
        Iterator its=SiderconCapaatos.listaPedidos.listIterator();
        System.out.println("cantidad "+SiderconCapaatos.listaPedidos.size());
        jTable1.removeAll();
        MiModeloTabla tb=new MiModeloTabla();
        tb.addColumn("Nro Pedido");
        tb.addColumn("Razon Social");
        tb.addColumn("Peso del Pedido");
        tb.addColumn("Vehiculo");
        tb.addColumn("Seleccion");
        tb.addColumn("Nueva Asignac de Vehiculo");
        tb.addColumn("Zona");
        tb.addColumn("Alerta");
        Object[] fila2=new Object[8];
        Double pesoAsignado=0.00;
        String codigoPedidoT=null;
        while(its.hasNext()){
            ped=(PedidosParaReparto) its.next();
            if(ped.getCodigoTangoDePedido().length() > 7){
                codigoPedidoT=ped.getCodigoTangoDePedido().substring(7);
            }else{
                codigoPedidoT=ped.getCodigoTangoDePedido();
            }
            fila2[0]=codigoPedidoT;
            fila2[1]=ped.getRazonSocial();
            //Double peso=pr.pesoTotalPedido(ped.getCodigoTangoDePedido(),seleccion);
            //ped.setPesoTotal(peso);
            Double peso=ped.getPesoTotal();
            pesoDia+=peso;
            fila2[2]=peso;
            fila2[3]=ped.getVehiculoAsignado();
            int numVehiculo=ped.getVehiculoAsignado() - 1;
            if((numVehiculo==0)||(numVehiculo < 0)){
                fila2[4]=false;
            }else{
                fila2[4]=false;
            unidad=(Vehiculos)vehiculos.get(ped.getVehiculoAsignado());
            Double capacidad=Math.ceil(unidad.getCapacidadDeCarga()+peso);
            unidad.setCapacidadDeCarga(capacidad);
                pesoAsignado+=peso;
                //numVehiculo=numVehiculo-1;
                jTable2.setValueAt(capacidad, numVehiculo,2);
                jTable2.setValueAt(true,numVehiculo,0);
                jTable2.setValueAt(ped.getNumeroDeHojaDeRuta(),numVehiculo,3);
                jTable2.setValueAt(ped.getNumeroDeListadoDeMateriales(),numVehiculo,4);
            }
             fila2[6]=ped.getZonaDescripcion();
            if(ped.getAlertaAsignada()>0){
                fila2[7]=ped.getAlertaDescripcion();
            }else{
                fila2[7]="";
            }
            tb.addRow(fila2);
        }
        jTable1.setModel(tb);
        String pesoD=formato.format(pesoDia);
        jTextField1.setText(pesoD);
        String pesoA=formato.format(pesoAsignado);
        jTextField2.setText(pesoA);
        Double pesoRestante=0.00;
        pesoRestante=pesoDia - pesoAsignado;
        String pesoT=formato.format(pesoRestante);
        jTextField3.setText(pesoT);
        
        
    }
    private void limpiarTablas(){
        int filasT1=jTable1.getRowCount();
        int filasT2=jTable2.getRowCount();
        for(int i=0; i< filasT1;i++){
            jTable1.setValueAt(false,i,4);
        }
        for(int i=0;i < filasT2;i++){
            jTable2.setValueAt(false, i,0);
            jTable2.setValueAt(0, i,3);
            jTable2.setValueAt(0, i,4);
        }
    }
    private void checkButtonV() throws SQLException{
                pedidosSeleccionados.clear();
        vehiculos.clear();
        limpiarTablas();
        
        DecimalFormat fr=new DecimalFormat("00");
        DecimalFormat formato=new DecimalFormat("####.##");
        SiderconCapaatos.listaPedidos.clear();
        SimpleDateFormat dia=new SimpleDateFormat("dd/mm/yyyy");
        //Date mes=Calendar.getInstance().getTime();
        //dateChooserCombo1.setDateFormat(dia);
        Calendar fechaNueva=dateChooserCombo1.getSelectedDate();
        //mes=dia.format(fechaNueva,null,null);
        Double pesoDia=0.00;
        int ano=fechaNueva.get(Calendar.YEAR);
        int mes=fechaNueva.get(Calendar.MONTH);
        mes++;
        int dd=fechaNueva.get(Calendar.DAY_OF_MONTH);
        
        //String fechaNueva=dateChooserCombo1.getText();
        //String fechaNueva=dateChooserCombo1.getSelectedDate();
        //String seleccion1=fechaNueva.toString();
        String seleccion=fr.format(dd)+"/"+fr.format(mes)+"/"+ano;
        //seleccion=new SimpleDateFormat(seleccion1).format(mes);
        fechaPedido=seleccion;
        //System.out.println("fecha seleccionada :"+seleccion);   
        Procesos pr=new Procesos();
        Vehiculos unidad=new Vehiculos();
        PedidosParaReparto ped=new PedidosParaReparto();
        vehiculos=pr.ListarVehiculos();
       
                try {
                    SiderconCapaatos.listaPedidos=pr.ListarPedidosPorFecha(seleccion);
                } catch (ClassNotFoundException ex) {
                    GuardarMovimientos gArch=new Archivador();
                String cod1=String.valueOf(ex);
                gArch.registrarErrores(cod1, "", "");
                Logger.getLogger(ListadoDePedidosParaReparto.class.getName()).log(Level.SEVERE, null, ex);
                }
 //ActualizarDatosPedidos act=new ActualizarDatosPedidos();
            //act.setFecha(fechaPedido);
            //act.setPedidos(vehiculos);
            //act.start();
       
        Iterator its=SiderconCapaatos.listaPedidos.listIterator();
        System.out.println("cantidad "+SiderconCapaatos.listaPedidos.size());
        jTable1.removeAll();
        MiModeloTabla tb=new MiModeloTabla();
        tb.addColumn("Nro Pedido");
        tb.addColumn("Razon Social");
        tb.addColumn("Peso del Pedido");
        tb.addColumn("Vehiculo");
        tb.addColumn("Seleccion");
        tb.addColumn("Zona");
        tb.addColumn("Alerta");
        Object[] fila2=new Object[7];
        Double pesoAsignado=0.00;
        while(its.hasNext()){
            ped=(PedidosParaReparto) its.next();
            int numVehiculo=ped.getVehiculoAsignado() - 1;
            
            if((numVehiculo==0)||(numVehiculo < 0)){
           
            fila2[0]=ped.getCodigoTangoDePedido();
            fila2[1]=ped.getRazonSocial();
            //Double peso=pr.pesoTotalPedido(ped.getCodigoTangoDePedido(),seleccion);
            //ped.setPesoTotal(peso);
            Double peso=ped.getPesoTotal();
            pesoDia+=peso;
            fila2[2]=peso;
            fila2[3]=ped.getVehiculoAsignado();
            
                fila2[4]=false;
            unidad=(Vehiculos)vehiculos.get(ped.getVehiculoAsignado());
            Double capacidad=Math.ceil(unidad.getCapacidadDeCarga()+peso);
            unidad.setCapacidadDeCarga(capacidad);
                pesoAsignado+=peso;
                //numVehiculo=numVehiculo-1;
                jTable2.setValueAt(capacidad, numVehiculo,2);
                jTable2.setValueAt(true,numVehiculo,0);
                jTable2.setValueAt(ped.getNumeroDeHojaDeRuta(),numVehiculo,3);
                jTable2.setValueAt(ped.getNumeroDeListadoDeMateriales(),numVehiculo,4);
            
             fila2[5]=ped.getZonaDescripcion();
            if(ped.getAlertaAsignada()>0){
                fila2[6]=ped.getAlertaDescripcion();
            }else{
                fila2[6]="";
            }
            
            tb.addRow(fila2);
            }
            }
        jTable1.setModel(tb);
        String pesoD=formato.format(pesoDia);
        jTextField1.setText(pesoD);
        String pesoA=formato.format(pesoAsignado);
        jTextField2.setText(pesoA);
        Double pesoRestante=0.00;
        pesoRestante=pesoDia - pesoAsignado;
        String pesoT=formato.format(pesoRestante);
        jTextField3.setText(pesoT);
        

    }
}
